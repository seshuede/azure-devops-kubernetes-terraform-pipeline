# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    jobs:
      
      - job: PredefinedVariables
        steps:
        - bash: echo PredefinedVariables
        - bash: echo Globla Variable - $(PipelineLevelVariable)
        - bash: echo BuildNumber - $(Build.BuildNumber)
        - bash: echo BuildId - $(Build.BuildId)
        - bash: echo SourceBranchName - $(Build.SourceBranchName)
        - bash: echo SourceDirectory - $(Build.SourceDirectory)
        - bash: echo DefaultWorkingDirectory -  $(Build.DefaultWorkingDirectory)
        - bash: ls -R $(System.DefaultWorkingDirectory)
        - bash: echo ArtifactStagingDirectory -  $(Build.ArtifactStagingDirectory)
      
      - job: VersionOfVariousSoftwares
        steps:
        - bash: java -version
        - bash: node --version
        - bash: python --version
        - bash: mvn --version  
      
      - job: CopyFilesFromDefalutWorkingDirectoryToStagingDirectory
        steps:
          - bash: echo Before Copy - ArtifactStagingDirectory -  $(Build.ArtifactStagingDirectory)
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              Contents: |
                **/*.yaml
                **/*.tf
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
        
          - bash: echo After Copy - ArtifactStagingDirectory -  $(Build.ArtifactStagingDirectory)
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  # - stage: DevDeploy
  #   dependsOn: 
  #     - Build
  #   variables:
  #     environment: Dev  
  #     stagetype : DevDeply
  #   jobs: 
  #     - job: DevDeployJob
  #       steps:
  #         - bash: echo DevDeployJob
  #         - bash: echo env_name $(environment) 
  #         - bash: echo stage_type $(stagetype)

  # - stage: QADeploy
  #   dependsOn:
  #     - Build
  #   variables:
  #     environment: QA  
  #   jobs:
  #     - job:  QADeployJob
  #       steps:
  #         - bash: echo QADeplyJob
  #         - bash: echo env_name $(environment)

  # - stage: ProdDeploy
  #   dependsOn:
  #     - DevDeploy
  #     - QADeploy
  #   variables:
  #     environment: Prod 
  #   jobs:
  #     - job: ProdDeployJob
  #       steps: 
  #         - bash: echo ProdDeployJob
  #         - bash: echo env_name $(environment)